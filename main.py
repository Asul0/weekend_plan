import logging
import os
import sys
from typing import Dict

from dotenv import load_dotenv
from langchain_core.messages import AIMessage
from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
)

from src.agent_core.graph import agent_app
from src.agent_core.state import AgentState


load_dotenv()

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    stream=sys.stdout,
)


logging.getLogger("src").setLevel(logging.INFO)


logging.getLogger("httpx").setLevel(logging.WARNING)
logging.getLogger("telegram.ext").setLevel(logging.WARNING)
logging.getLogger("apscheduler").setLevel(logging.WARNING)
logging.getLogger("dateparser").setLevel(logging.ERROR)

logger = logging.getLogger(__name__)


user_states: Dict[int, AgentState] = {}


def get_initial_state() -> AgentState:
    """–°–æ–∑–¥–∞–µ—Ç –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    return AgentState(
        chat_history=[],
        user_message="",
        classified_intent=None,
        next_action=None,
        error=None,
        is_awaiting_clarification=None,
        search_criteria=None,
        cached_candidates={},
        current_plan=None,
        plan_builder_result=None,
        analyzed_feedback=None,
        pinned_items={},
        command_queue=[],
        city_id_afisha=None,
        parsed_dates_iso=None,
        parsed_end_dates_iso=None,
        user_start_coordinates=None,
        is_awaiting_address=False,
        status_message_id=None,
        plan_presented=False,
    )


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start. –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    chat_id = update.effective_chat.id
    if chat_id in user_states:
        del user_states[chat_id]
        logger.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —á–∞—Ç–∞ {chat_id} —Å–±—Ä–æ—à–µ–Ω–æ –ø–æ –∫–æ–º–∞–Ω–¥–µ /start.")

    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –¥–æ—Å—É–≥. üòä\n\n"
        "–ù–∞–ø–∏—à–∏, —á–µ–º –±—ã —Ç—ã —Ö–æ—Ç–µ–ª –∑–∞–Ω—è—Ç—å—Å—è, –Ω–∞–ø—Ä–∏–º–µ—Ä: \n"
        "'–•–æ—á—É —Å—Ö–æ–¥–∏—Ç—å –≤ –∫–∏–Ω–æ –∏ –ø–æ–≥—É–ª—è—Ç—å –≤ –ø–∞—Ä–∫–µ –≤ –ú–æ—Å–∫–≤–µ –∑–∞–≤—Ç—Ä–∞ –≤–µ—á–µ—Ä–æ–º'."
    )


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
    if not update.message or not update.message.text:
        return

    chat_id = update.effective_chat.id
    user_message_text = update.message.text
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç chat_id={chat_id}: '{user_message_text}'")

    await context.bot.send_chat_action(chat_id=chat_id, action="typing")

    current_state = user_states.get(chat_id)
    if not current_state:
        logger.info(f"–ù–æ–≤–∞—è —Å–µ—Å—Å–∏—è –¥–ª—è chat_id={chat_id}. –°–æ–∑–¥–∞—é –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ.")
        current_state = get_initial_state()

    current_state["user_message"] = user_message_text

    final_state = None
    try:
        final_state = await agent_app.ainvoke(current_state, {"recursion_limit": 25})
    except Exception as e:
        logger.error(
            f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –≥—Ä–∞—Ñ–∞ –¥–ª—è chat_id={chat_id}: {e}",
            exc_info=True,
        )
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /start."
        )
        if chat_id in user_states:
            del user_states[chat_id]
        return

    response_message = "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ —Å–º–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å."
    if final_state and final_state.get("chat_history"):
        last_message = final_state["chat_history"][-1]
        if isinstance(last_message, AIMessage):
            response_message = last_message.content
        else:
            logger.warning(
                f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏–∏ –±—ã–ª–æ –Ω–µ –æ—Ç AI: {last_message}"
            )
    else:
        logger.error(
            f"–§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {final_state}"
        )

    await update.message.reply_text(response_message)

    if final_state:
        user_states[chat_id] = final_state
        logger.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —á–∞—Ç–∞ {chat_id} –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")
    else:
        if chat_id in user_states:
            del user_states[chat_id]


def main() -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞."""
    telegram_token = os.getenv("TELEGRAM_BOT_TOKEN")
    if not telegram_token:
        logger.critical("–¢–æ–∫–µ–Ω TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ!")
        sys.exit(1)

    application = Application.builder().token(telegram_token).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(
        MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message)
    )

    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    application.run_polling()
    logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")


if __name__ == "__main__":
    try:
        main()
    except Exception as e:
        logger.critical(f"–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–æ–π: {e}", exc_info=True)
